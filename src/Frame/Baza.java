/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import DbService.Aditiv1Service;
import DbService.Aditiv2Service;
import DbService.Aditiv3Service;
import DbService.GradilisteService;
import DbService.KonzbetonaService;
import DbService.KupacService;
import DbService.MasinistaService;
import DbService.RegtabliceService;
import DbService.SertifikatService;
import DbService.SpecbetonaService;
import DbService.StandbetonaService;
import DbService.SvojstvaService;
import DbService.VozacService;
import DbService.VozackamionService;
import DbService.VrstaCementaService1;
import DbService.VrstaCementaService2;
import DbService.VrstaFilerService;
import DbService.ZrnomaxService;
import java.awt.Cursor;
import java.net.URL;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author brasa
 */
public class Baza extends javax.swing.JFrame {

    /**
     * Creates new form Baza
     * @param gradilisteService
     * @param kupacService
     * @param masinistaService
     * @param vozacService
     * @param regtabliceService
     * @param vozackamionService
     * @param aditiv1Db
     * @param aditiv2Db
     * @param aditiv3Db
     * @param konzBetonaDb
     * @param specifBetDb
     * @param standbetonaDb
     * @param vrstaCementaDb
     * @param vrstaCementa2Db
     * @param vrstaFilerDb
     * @param zrnomaxDb
     * @param svojstvaDb
     * @param sertifikatDb
     */
    public Baza(GradilisteService gradilisteService, KupacService kupacService,
            MasinistaService masinistaService, VozacService vozacService, 
            RegtabliceService regtabliceService, VozackamionService vozackamionService, 
            Aditiv1Service aditiv1Db, Aditiv2Service aditiv2Db,Aditiv3Service aditiv3Db, 
            KonzbetonaService konzBetonaDb, SpecbetonaService specifBetDb, StandbetonaService standbetonaDb, 
            VrstaCementaService1 vrstaCementaDb, VrstaCementaService2 vrstaCementa2Db, 
            VrstaFilerService vrstaFilerDb, ZrnomaxService zrnomaxDb, SvojstvaService svojstvaDb,
            SertifikatService sertifikatDb) {
        initComponents();

        URL iconURL = getClass().getResource("/image/truckBar.png");
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());

        this.gradilisteDb = gradilisteService;
        this.kupacDb = kupacService;
        this.masinistaDb = masinistaService;
        this.vozacDb = vozacService;
        this.regTablicaDb = regtabliceService;
        this.vozacKamionDb = vozackamionService;
        this.aditiv1Db =  aditiv1Db;
        this.aditiv2Db = aditiv2Db;
        this.aditiv3Db = aditiv3Db;
        this.konzBetonaDb = konzBetonaDb;
        this.specifBetDb = specifBetDb;
        this.standbetonaDb = standbetonaDb;
        this.vrstaCementaDb = vrstaCementaDb;
        this.vrstaCementa2Db = vrstaCementa2Db;
        this.vrstaFilerDb = vrstaFilerDb;
        this.zrnoMaxDb = zrnomaxDb;
        this.svojstvaDb = svojstvaDb;
        this.sertifikatDb = sertifikatDb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeBaza = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonSave = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Baza");
        setName("Baza"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Baza");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Gradiliste");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Kupac");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Operater");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Vozac");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Registarske Tablice");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Vozac vozi kamion");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("aditiv1");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("aditiv2");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("aditiv3");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("konz. betona");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("klasa na izlaznost");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("klasa na hlorid");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("vrsta cementa 1");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("vrsta cementa 2");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("filer");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("zrno maks");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("svojstva");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("sertifikat");
        treeNode1.add(treeNode2);
        jTreeBaza.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeBaza.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeBazaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeBaza);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Save.png"))); // NOI18N
        jButtonSave.setText("Sacuvaj izmene");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Add.png"))); // NOI18N
        jButtonAdd.setText("Dodaj");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Exit.png"))); // NOI18N
        jButtonExit.setText("Izlaz");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExit))
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(866, 573));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTreeBazaValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeBazaValueChanged
       osveziPrikaz();
    }//GEN-LAST:event_jTreeBazaValueChanged

    
    private void osveziPrikaz(){
        String b = jTreeBaza.getSelectionPath().toString();

        if (b.compareTo("[Baza, Gradiliste]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getGradiliste();
            jButtonSave.setEnabled(true);
            gradilisteSelected = true;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, Kupac]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getKupci();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = true;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, Operater]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getMasinista();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = true;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, Vozac]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getVozac();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = true;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, Registarske Tablice]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getRegTab();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = true;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, Vozac vozi kamion]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getVozacKamion();
            jButtonSave.setEnabled(false);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = true;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, aditiv1]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getAditiv1();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = true;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, aditiv2]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getAditiv2();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = true;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, aditiv3]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            getAditiv3();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = true;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, konz. betona]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            konzBetona();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = true;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, klasa na izlaznost]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            specifBet();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = true;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, klasa na hlorid]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            standbetona();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = true;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, vrsta cementa 1]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaCementa();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = true;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
         if (b.compareTo("[Baza, vrsta cementa 2]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaCementa2();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = true;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, filer]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaFiler();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = true;
            zrnoMax = false;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, zrno maks]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            zrnoMax();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = true;
            svojstva = false;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, svojstva]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            svojstva();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = true;
            sertifikat = false;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (b.compareTo("[Baza, sertifikat]") == 0) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            sertifikat();
            jButtonSave.setEnabled(true);
            gradilisteSelected = false;
            kupacSelected = false;
            masinistaSelected = false;
            vozacSelected = false;
            regTablicaSelected = false;
            vozacKamionSelected = false;
            aditiv1 = false;
            aditiv2 = false;
            aditiv3 = false;
            konzBetona = false;
            specifBet = false;
            standbetona = false;
            vrstaCementa = false;
            vrstaCementa2 = false;
            vrstaFiler = false;
            zrnoMax = false;
            svojstva = false;
            sertifikat = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if (gradilisteSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            gradilisteDb.updateGradilista(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (kupacSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            kupacDb.updateKupci(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (masinistaSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            masinistaDb.updateMasinisti(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vozacSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vozacDb.updateVozaci(jTable1);
            MainFrame.osveziBazuVozac = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (regTablicaSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            regTablicaDb.updateRegTablice(jTable1);
            MainFrame.osveziBazuRegTab = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vozacKamionSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //vozacKamionDb.updateRegTab(jTable1);
            //MainFrame.osveziBazuVozacregTab = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));   
        }
        if (aditiv1) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            aditiv1Db.updateAditiv(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (aditiv2) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            aditiv2Db.updateAditiv(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (aditiv3) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            aditiv3Db.updateAditiv(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (konzBetona) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            konzBetonaDb.updateKonzbetona(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (specifBet) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            specifBetDb.updateSpecBetona(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (standbetona) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            standbetonaDb.updateSpecBetona(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vrstaCementa) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaCementaDb.updateSpecBetona(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vrstaCementa2) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaCementa2Db.updateSpecBetona(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
         if (vrstaFiler) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            vrstaFilerDb.updateFiler(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (zrnoMax) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            zrnoMaxDb.updateZrnomax(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (svojstva) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            svojstvaDb.updateSvojstva(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (sertifikat) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            sertifikatDb.updateSertifikat(jTable1);
            MainFrame.osveziBazu = true;
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (gradilisteSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                gradilisteAdd = new AddGradiliste(gradilisteDb);
                gradilisteAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (kupacSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                kupacAdd = new AddKupc(kupacDb);
                kupacAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (masinistaSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                masinistaAdd = new AddMasinista(masinistaDb);
                masinistaAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vozacSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                vozacAdd = new AddVozac1(vozacDb);
                vozacAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (regTablicaSelected) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                regTabAdd = new AddRegTab(regTablicaDb);
                regTabAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vozacKamionSelected) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                vozVozilaAdd = new VozaciVozila();
                vozVozilaAdd.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (aditiv1) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addAditiv1 = new AddAditiv1(aditiv1Db);
                addAditiv1.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (aditiv2) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addAditiv2 = new AddAditiv2(aditiv2Db);
                addAditiv2.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (aditiv3) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addAditiv3 = new AddAditiv3(aditiv3Db);
                addAditiv3.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (konzBetona) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addKonzBetona = new AddKonzBetona(konzBetonaDb);
                addKonzBetona.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (specifBet) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addSpecBetona = new AddSpecBetona(specifBetDb);
                addSpecBetona.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (standbetona) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addStandBetona = new AddStandBetona(standbetonaDb);
                addStandBetona.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vrstaCementa) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addVrstaCementa = new AddVrstaCementa(vrstaCementaDb);
                addVrstaCementa.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vrstaCementa2) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addVrstaCementa2 = new AddVrstaCementa2(vrstaCementa2Db);
                addVrstaCementa2.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (vrstaFiler) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addVrstaFiler = new AddVrstaFiler(vrstaFilerDb);
                addVrstaFiler.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (zrnoMax) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addZrnomax = new AddZrnomax(zrnoMaxDb);
                addZrnomax.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (svojstva) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addSvojstva = new AddSvojstva(svojstvaDb);
                addSvojstva.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        if (sertifikat) {    
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                addSertifikat = new AddSertifikat(sertifikatDb);
                addSertifikat.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Doslo je do kreske u komunikaciji sa bazom");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_jButtonAddActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTreeBaza;
    // End of variables declaration//GEN-END:variables

    private final GradilisteService gradilisteDb;
    private final KupacService kupacDb;
    private final MasinistaService masinistaDb;
    private final VozacService vozacDb;
    private final RegtabliceService regTablicaDb;
    private final VozackamionService vozacKamionDb;
    private final Aditiv1Service aditiv1Db;
    private final Aditiv2Service aditiv2Db;
    private final Aditiv3Service aditiv3Db;
    private final KonzbetonaService konzBetonaDb;
    private final SpecbetonaService specifBetDb;
    private final StandbetonaService standbetonaDb;
    private final VrstaCementaService1 vrstaCementaDb;
    private final VrstaCementaService2 vrstaCementa2Db;
    private final VrstaFilerService vrstaFilerDb;
    private final ZrnomaxService zrnoMaxDb;
    private final SvojstvaService svojstvaDb;
    private final SertifikatService sertifikatDb;


    private boolean gradilisteSelected = false;
    private boolean kupacSelected = false;
    private boolean masinistaSelected = false;
    private boolean vozacSelected = false;
    private boolean regTablicaSelected = false;
    private boolean vozacKamionSelected = false;
    private boolean aditiv1 = false;
    private boolean aditiv2 = false;
    private boolean aditiv3 = false;
    private boolean konzBetona = false;
    private boolean specifBet = false;
    private boolean standbetona = false;
    private boolean vrstaCementa = false;
    private boolean vrstaCementa2 = false;
    private boolean vrstaFiler = false;
    private boolean zrnoMax = false;
    private boolean svojstva = false;
    private boolean sertifikat = false;

    private AddGradiliste gradilisteAdd;
    private AddKupc kupacAdd;
    private AddMasinista masinistaAdd;
    private AddVozac1 vozacAdd;
    private AddRegTab regTabAdd;
    private VozaciVozila vozVozilaAdd;
    private AddAditiv1 addAditiv1;
    private AddAditiv2 addAditiv2;
    private AddAditiv3 addAditiv3;
    private AddKonzBetona addKonzBetona;
    private AddSpecBetona addSpecBetona;
    private AddStandBetona addStandBetona;
    private AddVrstaCementa addVrstaCementa; 
    private AddVrstaCementa2 addVrstaCementa2; 
    private AddVrstaFiler addVrstaFiler;
    private AddZrnomax addZrnomax;
    private AddSvojstva addSvojstva;
    private AddSertifikat addSertifikat;
    
    public static boolean osveziPrikaz = false;
    

    private void getGradiliste() {

        List<Db.Gradiliste> result = gradilisteDb.getGradilista();
        Object[][] obj = new Object[result.size()][5];

        int i = 0;

        for (Db.Gradiliste auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getGradiliste();
            obj[i][2] = auto.getMesto();
            obj[i][3] = auto.getAdresa();
            obj[i][4] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Gradiliste", "Mesto", "Adresa", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(1);

    }

    private void getKupci() {
        List<Db.Kupac> result = kupacDb.getKupci();
        Object[][] obj = new Object[result.size()][4];

        int i = 0;

        for (Db.Kupac auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getKupac();
            obj[i][2] = auto.getAdresa();
            obj[i][3] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Kupac", "Adresa", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(1);

    }

    private void getMasinista() {
        List<Db.Masinista> result = masinistaDb.getMasinista();
        Object[][] obj = new Object[result.size()][3];

        // List<String> masin = new ArrayList<String>(Arrays.asList(result));
        // masinistaComboBox.loadBox(masin);
        for (int i = 0; i < result.size(); i++) {
            obj[i][0] = i + 1;
            obj[i][1] = result.get(i).getImePrezime();
            obj[i][2] = result.get(i).getIdmasinista();
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Masinista", ""});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }

    private void getVozac() {
        List<Db.Vozaci> result = vozacDb.getVozaci();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Vozaci auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getImeprezimevozaci();
            obj[i][2] = auto.getIdvozaci();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Ime i prezime", "rb"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }

    private void getRegTab() {
        List<Db.Regtablice> result = regTablicaDb.getRegTablice();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Regtablice auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getTablice();
            obj[i][2] = auto.getIdtablice();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Reg tablice", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);

    }

    private void getVozacKamion() {
        List<Db.Vozackamion> result = vozacKamionDb.getVozacKamion();
        Object[][] obj = new Object[result.size()][4];

        int i = 0;

        for (Db.Vozackamion auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getVozac().getImeprezimevozaci();
            obj[i][2] = auto.getTablice().getTablice();
            obj[i][3] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Ime i prezime", "Reg tablice", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(1);
    }
    
    private void getAditiv1() {
        List<Db.Aditiv1> result = aditiv1Db.getVrstaCementa();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Aditiv1 auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    
    private void getAditiv2() {
        List<Db.Aditiv2> result = aditiv2Db.getVrstaCementa();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Aditiv2 auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    
    private void getAditiv3() {
        List<Db.Aditiv3> result = aditiv3Db.getVrstaCementa();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Aditiv3 auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void konzBetona() {
        List<Db.Konzbetona> result = konzBetonaDb.getKonzistencijaBetona();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Konzbetona auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    
    private void specifBet() {
        List<Db.Specbetona> result = specifBetDb.getSpecBetona();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Specbetona auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    
    private void standbetona() {
        List<Db.Standbetona> result = standbetonaDb.getStandBetona();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Standbetona auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getText();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void vrstaCementa() {
        List<Db.Vrstacementa> result = vrstaCementaDb.getVrstaCementa();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Vrstacementa auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getVrstacem();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
     private void vrstaCementa2() {
        List<Db.Vrstacementa2> result = vrstaCementa2Db.getVrstaCementa();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Vrstacementa2 auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getVrstacem();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void vrstaFiler() {
        List<Db.Filer> result = vrstaFilerDb.getVrstaFiler();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Filer auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getFiler();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void zrnoMax() {
        List<Db.Zrnomax> result = zrnoMaxDb.getZrnomax();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Zrnomax auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getZrnomax();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void svojstva() {
        List<Db.Svojstva> result = svojstvaDb.getSvojstva();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Svojstva auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getSvojstva();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    private void sertifikat() {
        List<Db.Sertifikat> result = sertifikatDb.getSertifikat();
        Object[][] obj = new Object[result.size()][3];

        int i = 0;

        for (Db.Sertifikat auto : result) {
            obj[i][0] = i + 1;
            obj[i][1] = auto.getSertifikat();
            obj[i][2] = auto.getId();
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(obj, new Object[]{"r.b.", "Text", "id"});
        jTable1.setModel(model);
        jTable1.setRowMargin(4);
        jTable1.setRowHeight(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(1);
    }
    
}
