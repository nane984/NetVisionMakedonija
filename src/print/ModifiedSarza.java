/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package print;

import DbService.KService;
import DbService.KomponenteService;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author branko.scekic
 */
public class ModifiedSarza extends javax.swing.JFrame {

    /**
     * Creates new form AccessModifiedSarza
     */
    public ModifiedSarza(KomponenteService komponente, int idOtpremnice, DetaljniIzvestaj detaljniIzvestaj, DetaljniIzvestaj1 detaljniIzvestaj1) {
        initComponents();
        this.komponente = komponente;
        this.komp = new KService();
        
        brOtpreme = idOtpremnice;
        
        this.detaljniIzvestaj = detaljniIzvestaj;
        this.detaljniIzvestaj1 = detaljniIzvestaj1;
        
        fillTable(brOtpreme);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Br. Otpreme:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Sacuvaj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Izadji");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         boolean upisano = false;
        
        for (int i = 0; i < jTable1.getRowCount()-3; i++) {
            try {
                
                komponente.updateKomponente(Integer.parseInt(jTable1.getValueAt(i, size+3).toString()), Integer.parseInt(jTable1.getValueAt(i, 0).toString()), 
                        Float.parseFloat(jTable1.getValueAt(i, 1).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 2).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 3).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 4).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 5).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 6).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 7).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 8).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 9).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 10).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 11).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, 12).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, size+1).toString()),
                        Float.parseFloat(jTable1.getValueAt(i, size+2).toString()));
                upisano = true;
                
                detaljniIzvestaj.fillTable(brOtpreme);
                detaljniIzvestaj1.fillTable(brOtpreme);
                
            } catch (java.lang.NullPointerException ex) {
                upisano = false;
            } catch (java.lang.Exception e) {
                upisano = false; 
            }
        }
        if(upisano){
            this.dispose();
            JOptionPane.showMessageDialog(null, "Sacuvali ste izmene");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
        
         
      public void fillTable(int idOtpremnice) {
        try {
            List<Db.Komponente> result = komponente.getKomponenteWhere(idOtpremnice);

            List<Db.K> k = komp.getKomponente();

            DecimalFormat df2 = new DecimalFormat("#.##");
            DecimalFormat df1 = new DecimalFormat("##.#");

            double ukupnok1Ostvareno = 0;
            double ukupnok1Zadato = 0;
            double ukupnok2Ostvareno = 0;
            double ukupnok2Zadato = 0;
            double ukupnok3Ostvareno = 0;
            double ukupnok3Zadato = 0;
            double ukupnok4Ostvareno = 0;
            double ukupnok4Zadato = 0;
            double ukupnok5Ostvareno = 0;
            double ukupnok5Zadato = 0;
            double ukupnok6Ostvareno = 0;
            double ukupnok6Zadato = 0;
            double ukupnok7Ostvareno = 0;
            double ukupnok7Zadato = 0;
            double ukupnok8Ostvareno = 0;
            double ukupnok8Zadato = 0;
            double ukupnok9Ostvareno = 0;
            double ukupnok9Zadato = 0;
            double ukupnok10Ostvareno = 0;
            double ukupnok10Zadato = 0;
            double ukupnok11Ostvareno = 0;
            double ukupnok11Zadato = 0;
            double ukupnok12Ostvareno = 0;
            double ukupnok12Zadato = 0;

            double korekcijaf1 = 0;
            double korekcijaf2 = 0;
            double korekcijaf3 = 0;
            double korekcijaf4 = 0;

            size = 0;

            for (Db.K auto : k) {
                if (auto.getIfcheck() == 1) {
                    size++;
                }
            }
            int[] formatK = new int[size];
            int a = 0;
            for (Db.K auto : k) {
                if (auto.getIfcheck() == 1) {
                    formatK[a] = auto.getDecformat();
                    a++;
                }
            }

            int i = 0;
            Object[][] obj = new Object[result.size() + 3][size + 4];
            for (Db.Komponente auto : result) {

                obj[i][0] = auto.getBrSarze();              // da bi imali r.b kolonu stavili smo size + 1;
                obj[i][size + 1] = auto.getKolicinabetona();
                obj[i][size + 2] = auto.getKolicinaostvarenakg();
                obj[i][size + 3] = auto.getRbkomp();               // da bi imali id komponente stavil smo jos + 1;
                
                obj[result.size()][0] = "zadato";           
                obj[result.size() + 1][0] = "izdato";
                obj[result.size() + 2][0] = "%";
                

                if (k.get(0).getIfcheck() == 1) {
                    obj[i][1] = auto.getK1Ostv();
                    ukupnok1Ostvareno += auto.getK1Ostv().doubleValue();
                    ukupnok1Zadato += auto.getK1Zad().doubleValue();

                    korekcijaf1 += checkFloatIsNull(auto.getKorigovanof1());

                    if (i == result.size() - 1) {
                        obj[result.size()][1] = df2.format(ukupnok1Zadato);
                        //obj[result.size()][1] = df2.format(korekcijaf1);
                        obj[result.size() + 1][1] = df2.format(ukupnok1Ostvareno);
                        obj[result.size() + 2][1] = df2.format((ukupnok1Ostvareno / ukupnok1Zadato) * 100) + "  %";
                    }
                    

                }
                if (k.get(1).getIfcheck() == 1) {
                    obj[i][2] = auto.getK2Ostv();
                    //obj[i][2] = auto.getKorigovanof2();
                    ukupnok2Ostvareno += auto.getK2Ostv().doubleValue();
                    ukupnok2Zadato += auto.getK2Zad().doubleValue();

                    korekcijaf2 += checkFloatIsNull(auto.getKorigovanof2());

                    if (i == result.size() - 1) {
                        obj[result.size()][2] = df2.format(ukupnok2Zadato);
                        //obj[result.size()][2] = df2.format(korekcijaf2);
                        obj[result.size() + 1][2] = df2.format(ukupnok2Ostvareno);
                        obj[result.size() + 2][2] = df2.format((ukupnok2Ostvareno / ukupnok2Zadato) * 100) + "  %";
                    }

                }

                if (k.get(2).getIfcheck() == 1) {
                    obj[i][3] = auto.getK3Ostv();
                    //obj[i][3] = auto.getKorigovanof3();
                    ukupnok3Ostvareno += auto.getK3Ostv().doubleValue();
                    ukupnok3Zadato += auto.getK3Zad().doubleValue();

                    korekcijaf3 += checkFloatIsNull(auto.getKorigovanof3());

                    if (i == result.size() - 1) {
                        obj[result.size()][3] = df2.format(ukupnok3Zadato);
                        //obj[result.size()][3] = df2.format(korekcijaf3);
                        obj[result.size() + 1][3] = df2.format(ukupnok3Ostvareno);
                        obj[result.size() + 2][3] = df2.format((ukupnok3Ostvareno / ukupnok3Zadato) * 100) + "  %";
                    }
                }

                if (k.get(3).getIfcheck() == 1) {
                    obj[i][4] = auto.getK4Ostv();
                    //obj[i][4] = auto.getKorigovanof4();
                    ukupnok4Ostvareno += auto.getK4Ostv().doubleValue();
                    ukupnok4Zadato += auto.getK4Zad().doubleValue();

                    korekcijaf4 += checkFloatIsNull(auto.getKorigovanof4());

                    if (i == result.size() - 1) {
                        obj[result.size()][4] = df2.format(ukupnok4Zadato);
                        //obj[result.size()][4] = df2.format(korekcijaf4);
                        obj[result.size() + 1][4] = df2.format(ukupnok4Ostvareno);
                        obj[result.size() + 2][4] = df2.format((ukupnok4Ostvareno / ukupnok4Zadato) * 100) + "  %";
                    }
                }

                if (k.get(4).getIfcheck() == 1) {
                    obj[i][5] = auto.getK5Ostv();
                    ukupnok5Ostvareno += auto.getK5Ostv().doubleValue();

                    ukupnok5Zadato += auto.getK5Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][5] = df2.format(ukupnok5Zadato);
                        obj[result.size() + 1][5] = df2.format(ukupnok5Ostvareno);
                        obj[result.size() + 2][5] = df2.format((ukupnok5Ostvareno / ukupnok5Zadato) * 100) + "  %";
                    }
                }

                if (k.get(5).getIfcheck() == 1) {
                    obj[i][6] = auto.getK6Ostv();
                    ukupnok6Ostvareno += auto.getK6Ostv().doubleValue();

                    ukupnok6Zadato += auto.getK6Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][6] = df2.format(ukupnok6Zadato);
                        obj[result.size() + 1][6] = df2.format(ukupnok6Ostvareno);
                        obj[result.size() + 2][6] = df2.format((ukupnok6Ostvareno / ukupnok6Zadato) * 100) + "  %";
                    }
                }

                if (k.get(6).getIfcheck() == 1) {
                    obj[i][7] = auto.getK7Ostv();
                    ukupnok7Ostvareno += auto.getK7Ostv().doubleValue();

                    ukupnok7Zadato += auto.getK7Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][7] = df2.format(ukupnok7Zadato);
                        obj[result.size() + 1][7] = df2.format(ukupnok7Ostvareno);
                        obj[result.size() + 2][7] = df2.format((ukupnok7Ostvareno / ukupnok7Zadato) * 100) + "  %";
                    }
                }

                if (k.get(7).getIfcheck() == 1) {
                    obj[i][8] = auto.getK8Ostv();
                    ukupnok8Ostvareno += auto.getK8Ostv().doubleValue();

                    ukupnok8Zadato += auto.getK8Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][8] = df2.format(ukupnok8Zadato);
                        obj[result.size() + 1][8] = df2.format(ukupnok8Ostvareno);
                        obj[result.size() + 2][8] = df2.format((ukupnok8Ostvareno / ukupnok8Zadato) * 100) + "  %";
                    }
                }

                if (k.get(8).getIfcheck() == 1) {
                    obj[i][9] = auto.getK9Ostv();
                    ukupnok9Ostvareno += auto.getK9Ostv().doubleValue();

                    ukupnok9Zadato += auto.getK9Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][9] = df2.format(ukupnok9Zadato);
                        obj[result.size() + 1][9] = df2.format(ukupnok9Ostvareno);
                        obj[result.size() + 2][9] = df2.format((ukupnok9Ostvareno / ukupnok9Zadato) * 100) + "  %";
                    }
                }

                if (k.get(9).getIfcheck() == 1) {
                    obj[i][10] = auto.getK10Ostv();
                    ukupnok10Ostvareno += auto.getK10Ostv().doubleValue();

                    ukupnok10Zadato += auto.getK10Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][10] = df2.format(ukupnok10Zadato);
                        obj[result.size() + 1][10] = df2.format(ukupnok10Ostvareno);
                        obj[result.size() + 2][10] = df2.format((ukupnok10Ostvareno / ukupnok10Zadato) * 100) + "  %";
                    }
                }
                
                if (k.get(10).getIfcheck() == 1) {
                    obj[i][11] = auto.getK11Ostv();
                    ukupnok11Ostvareno += auto.getK11Ostv().doubleValue();

                    ukupnok11Zadato += auto.getK11Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][11] = df2.format(ukupnok11Zadato);
                        obj[result.size() + 1][11] = df2.format(ukupnok11Ostvareno);
                        obj[result.size() + 2][11] = df2.format((ukupnok11Ostvareno / ukupnok11Zadato) * 100) + "  %";
                    }
                }
                
                if (k.get(11).getIfcheck() == 1) {
                    obj[i][12] = auto.getK12Ostv();
                    ukupnok12Ostvareno += auto.getK12Ostv().doubleValue();

                    ukupnok12Zadato += auto.getK12Zad().doubleValue();

                    if (i == result.size() - 1) {
                        obj[result.size()][12] = df2.format(ukupnok12Zadato);
                        obj[result.size() + 1][12] = df2.format(ukupnok12Ostvareno);
                        obj[result.size() + 2][12] = df2.format((ukupnok12Ostvareno / ukupnok11Zadato) * 100) + "  %";
                    }
                }

                i++;
            }

            String[] zaglavlje = new String[size + 4];

            for (int m = 0; m < size; m++) {
                zaglavlje[0] = "br s.";
                zaglavlje[m + 1] = k.get(m).getKomponenta();
                if(m==size-1){
                    zaglavlje[m + 2] = "kol bet";
                    zaglavlje[m + 3] = "kol zad kg";
                    zaglavlje[m + 4] = "rbr";
                }
            }

            model = new DefaultTableModel(obj, zaglavlje);
            jTable1.setModel(model);
            jTable1.setRowMargin(2);
            jTable1.setRowHeight(30);
            jTable1.setShowGrid(true);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(65);
            jTable1.getColumnModel().getColumn(size + 3).setMaxWidth(1);

        } catch (Exception e) {
            System.out.println(e);
        }
    }

     private double checkFloatIsNull(Float vr) {
        if (vr == null) {
            vr = 1f;
        }
        return vr;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel model;
    private KomponenteService komponente;
    private final KService komp;
    private int size = 0;
    
    private DetaljniIzvestaj detaljniIzvestaj;
    private DetaljniIzvestaj1 detaljniIzvestaj1;
    
    private int brOtpreme = 0;
}
